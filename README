
baton |bəˈtän|

  noun, A short stick or staff or something resembling one.

Client programs and API for use with iRODS (Integrated Rule-Oriented
Data System).

baton is intended as a supplement to the command line client programs
(ils, imeta etc.) provided with a standard iRODS installation. Its
focus is metadata operations for iRODS collections and data objects.

The features it provides are:

- Listing of data objects and collections as JSON, including their
  metadata (AVUs), file size, access control lists (ACLs) and creation
  and modification timestamps.

- Queries on metadata, on access control lists (ACLs), creation and
  modification timestamps and timestamp ranges. The full range of
  iRODS query operators is supported.

- A single JSON representation throughout for listing, queries and
  updates.

- Unbuffered option for IPC via pipes with fine-grained error
  reporting for batch operations.


Installation:

Install iRODS and baton dependencies (Jansson) as described in their
documentation. iRODS does not install its headers and libraries in the
standard locations, therefore you should set the environment variable
IRODS_HOME to the root of your iRODS installation before executing the
following commands.

# Use IRODS_HOME to set CPPFLAGS and LDFLAGS for compilation (assuming bash)
IRODS_HOME=<path to iRODS> source set_irods_home.sh

# Generate the configure script
autoreconf -i

# Generate the makefiles (see INSTALL for arguments to configure)
./configure

# Compile
make

# Optionally, run the test suite
make check

# If you have run configure with the optional --enable-coverage flag
# you can generate test coverage statistics with lcov.
make check-coverage

# Install, including HTML manual and manpage.
make clean install


Synopsis:

For full details of the JSON accepted and returned by the programs in
baton, see the manual in the doc directory.


Dependencies:

iRODS   http://www.irods.org

Jansson https://github.com/akheron/jansson.git

Optional dependencies:

Sphinx http://sphinx-doc.org/               (for the manual and manpages).
check  http://check.sourceforge.net/        (for unit tests).
lcov   http://ltp.sourceforge.net/coverage/ (for test coverage analysis)

jq     http://stedolan.github.io/jq/        (for processing input and output)
